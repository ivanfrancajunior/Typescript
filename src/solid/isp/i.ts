/*
    Principio da segrega√ß√£o de interfaces:  

    Este principio diz que os clientes n√£o devem ser for√ßados a depender de types, interfaces ou membros abstratos que n√£o utilizam.
    
    Ou seja dada uma classe x que implementa uma interface y, os tipos e metodos de y n√£o devem for√ßar x a implement√°-los.

    Um exemplo para isto em cima da tem√°tica do c√≥digo √© ter uma classe de cliente que pode ser tanto uma empresa quanto uma pessoa fisica, ambos s√£o do tipo 'costumer' por se adequarem as caracteristica de um costumer por√©m, seus atributos n√£o s√£o os mesmos. 

*/
console.log("üî•");

import {
  TenPercentDiscount,
  NoDiscount,
  TwentyPercentDiscount,
} from "./entities/Discount";
import { Order } from "./entities/Order";
import { Product } from "./entities/Products";
import { ShoppingCart } from "./entities/ShoppingCart";
import { MessageService } from "./services/MessageService";
import { PersistencyService } from "./services/PersistencyService";

// const noDiscount = new NoDiscount();
// const tenPercentDiscount = new TenPercentDiscount();
const twentyPercentDiscount = new TwentyPercentDiscount();
const shoppingCart = new ShoppingCart(twentyPercentDiscount);
const messaging = new MessageService();
const persistency = new PersistencyService();
const order = new Order(shoppingCart, messaging, persistency);

shoppingCart.addItem(new Product("Camisa", 39.91));
shoppingCart.addItem(new Product("Bermuda", 69.99));
shoppingCart.addItem(new Product("T√™nis", 249.9));

console.log(shoppingCart.items);
console.log(shoppingCart.total());
console.log(shoppingCart.totalWhithDiscount());
console.log(order.orderStatus);
order.checkout();
console.log(order.orderStatus);
